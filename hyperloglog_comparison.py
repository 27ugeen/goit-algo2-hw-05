import time
import json
import re
import hyperloglog

def load_ip_addresses(file_path):
    ip_addresses = []
    pattern = re.compile(r'(\d+\.\d+\.\d+\.\d+)')
    
    try:
        with open(file_path, "r", encoding="utf-8") as file:
            for line in file:
                try:
                    # –Ø–∫—â–æ –ª–æ–≥ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
                    data = json.loads(line.strip())
                    ip = data.get("remote_addr")
                except json.JSONDecodeError:
                    # –Ø–∫—â–æ –ª–æ–≥ —É –∑–≤–∏—á–∞–π–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
                    match = pattern.search(line)
                    ip = match.group(1) if match else None
                
                if ip:
                    ip_addresses.append(ip)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    
    return ip_addresses

def exact_unique_count(ip_addresses):
    start_time = time.time()
    unique_ips = set(ip_addresses)
    duration = time.time() - start_time
    return len(unique_ips), duration

def approximate_unique_count(ip_addresses):
    start_time = time.time()
    hll = hyperloglog.HyperLogLog(0.01)
    for ip in ip_addresses:
        hll.add(ip)
    count = len(hll)
    duration = time.time() - start_time
    return count, duration

if __name__ == "__main__":
    log_file_path = "lms-stage-access.log"

    ip_addresses = load_ip_addresses(log_file_path)

    if not ip_addresses:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó IP-–∞–¥—Ä–µ—Å–∏ —É —Ñ–∞–π–ª—ñ.")
    else:
        print(f"üìå –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ —É –ª–æ–≥–∞—Ö: {len(ip_addresses)}")
        print(f"üìå –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö IP –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º: {len(set(ip_addresses))}")

        exact_count, exact_time = exact_unique_count(ip_addresses)

        approx_count, approx_time = approximate_unique_count(ip_addresses)

        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:")
        print(f"{'':<25}{'–¢–æ—á–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫':<20}{'HyperLogLog':<20}")
        print(f"{'–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏':<25}{exact_count:<20}{approx_count:<20}")
        print(f"{'–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—Å–µ–∫.)':<25}{exact_time:<20.5f}{approx_time:<20.5f}")